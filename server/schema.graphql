enum Status {
  Waiting
  Active
}

type NBAPlayer {
  id: ID!
  name: String!
  age: Int!
  team: String!
  games: Int!
  pts: Float!
  reb: Float!
  ast: Float!
  stl: Float!
  blk: Float!
  fgPct: Float!
  ftPct: Float!
  fg3Pct: Float!
}

type Player {
  id: ID!
  team: String!
  name: String!
  cards: [NBAPlayer]
  cardsLeft: Int
}

type Game {
  id: ID!
  name: String!
  creator: ID
  status: String!
  turn: ID
  players: [Player]
  deleteAt: Int
}

type Query {
  getRandomPlayers(count: Int!): [NBAPlayer]
  getGameState(gameId: ID!): Game
}

type Mutation {
  createGame(name: String, player: PlayerInput!): Game
  joinGame(gameId: ID!, player: PlayerInput): Game
  removeFromGame(gameId: ID!, playerId: ID!): Game
  startGame(gameId: ID!): Game
  chooseStat(gameId: ID!, playerId: ID!, cardId: ID!): Game
  
}

type Subscription {
  getGameState(gameId: ID!, userId: ID): Game
  statChosen(gameId: ID!): Game
}

input PlayerInput {
  id: ID
  name: String!
}

input CardInput {
  id: ID!
  name: String!
  age: Int!
  team: String!
  games: Int!
  pts: Float!
  reb: Float!
  ast: Float!
  stl: Float!
  blk: Float!
  fgPct: Float!
  ftPct: Float!
  fg3Pct: Float!
}